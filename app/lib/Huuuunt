#!/usr/bin/ruby

# 主程序入口

# 运行命令解释器，等待命令输入。

#Usage: Huuuunt [global options] COMMAND [options] [ARGS]
#
#Available commands:
#    help            Provide help for individual commands
#    match           赛事名称等数据处理程序
#      export        赛事名称等数据从数据库中导出到Excel
#      import        赛事名称等数据从Excel中导入到数据库
#    version         Show the version of the program
#
#Global options:
#        --verbose                    输出详细信息
#    -h, --help                       Show help
#    -v, --version                    Show the version of the program


########################
# require文件加载路径设置 #
########################
$LOAD_PATH.unshift(File.dirname(File.expand_path("./", __FILE__)))

require 'rubygems'
require 'log4r'
require 'cmdparse'
#require 'net/http'
#require 'iconv'
#require 'date'
#require 'hpricot'

require 'cmd/match_cmd'
require 'cmd/team_cmd'
require 'cmd/result_cmd'
require 'cmd/europe_cmd'

###################
# log4r日志模块配置 #
###################
$logger = Log4r::Logger.new("Huuuunt")
# 日志记录等级设置
$logger.level = Log4r::DEBUG
formatter = Log4r::PatternFormatter.new(
  :pattern => "%C[%l]: %M"
  #:pattern => "%C[%l]:[%t] %M",
  #:date_format => "%Y/%m/%d %H:%M:%S"
)
logfile = Log4r::FileOutputter.new(
  "log",
  {
    :filename => File.expand_path("./log/huuuunt.log", File.dirname(__FILE__)),
    :formatter => formatter,
    :trunc => true   # 下次运行是否先清空原先的日志文件内容
  })
$logger.outputters = logfile

###################
# CmdParse相关设置 #
###################
cmd = CmdParse::CommandParser.new(true, true)
cmd.program_name = "Huuuunt"
cmd.program_version = [0, 0, 1]
cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"
  opt.on("--verbose", "输出详细信息") {|t| $verbose = true }
end
cmd.add_command(CmdParse::HelpCommand.new)
cmd.add_command(CmdParse::VersionCommand.new)

# 注意：MatchCmd这个类必须存在，否则报错。
## 所有命令列表
commands = {
  "MatchCmd" => ["MatchImportCmd", "MatchExportCmd"],
  "TeamCmd" => ["TeamImportCmd", "TeamExportCmd"],
  "ResultCmd" => ["ResultDownloadCmd", "ResultPreprocessCmd", "ResultUpdateCmd"],
  "EuropeCmd" => ["EuropeDownloadCmd", "EuropePreprocessCmd", "EuropeCheckResultCmd", "EuropeUpdateCmd"]
  #"" => ["", "", ""]
}

commands.each do |m_cmd, s_cmds|
  src = <<-END_SRC
    new_cmd = #{m_cmd}.new
    cmd.add_command(new_cmd)
  END_SRC
  eval src
  s_cmds.each do |s_cmd|
    src = "new_cmd.add_command(#{s_cmd}.new)"
    eval src
  end
end

## 赛事名称等数据处理CMD
#match_cmd = MatchCmd.new
#match_cmd.add_command(MatchImportCmd.new)
#match_cmd.add_command(MatchExportCmd.new)
#
#cmd.add_command(match_cmd)

# CmdParse开始解析命令
cmd.parse
